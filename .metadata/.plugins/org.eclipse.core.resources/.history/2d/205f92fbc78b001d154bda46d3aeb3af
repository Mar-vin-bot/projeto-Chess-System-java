package boardgame;

public class Board {
	
	private Integer rows;
	private Integer columns;
	
	protected Piece[][] pieces;

	public Board(Integer rows, Integer columns) {
		if (rows < 1 || columns < 1) {
			throw new BoardException("Numero de coluna e linhas deve ser maior que 1");
		}
		
		this.rows = rows;
		this.columns = columns;
		pieces = new Piece [rows][columns];
	}

	public Integer getRows() {
		return rows;
	}

	public Integer getColumns() {
		return columns;
	}

	public Piece piece(int row, int column) {
		if(!positionExists(row, column)) {
			throw new BoardException("Position not on the board");
		}
		return pieces[row][column];
	}
	
	public Piece piece(Position position) {
		return pieces[position.getRow()][position.getColumn()];
	}
	
	public void pleacePiece(Piece piece, Position position) {
		pieces[position.getRow()][position.getColumn()] = piece;
		piece.position = position;
	}
	
	private boolean positionExists(int row, int coloumn) {
		return row >= 0 && row < rows && coloumn >=0 && coloumn < columns;
	}
	
	public boolean positionExists (Position position) {
		return positionExists(position.getRow(), position.getColumn());
	}
	
	public boolean thereIsAPiece(Position position) {
		return piece(position) != null;
	}
	

	
}
